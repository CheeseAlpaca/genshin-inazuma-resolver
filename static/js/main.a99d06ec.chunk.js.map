{"version":3,"sources":["core/search.js","App.js","reportWebVitals.js","index.js"],"names":["compareArray","a","b","length","Error","i","hitStone","no","st","effect","totalStateNum","origin","s","JSON","parse","stringify","paths","doSearch","target","hitNo","path","maxHitTimes","push","toString","search","initState","targetState","effects","shortest","repeat","App","useState","setOrigin","setTarget","setEffect","result","setResult","Box","sx","p","display","flexDirection","TextField","required","label","value","onChange","event","m","TextareaAutosize","minRows","style","width","Button","variant","onClick","o","t","e","Card","CardContent","Typography","fontSize","color","gutterBottom","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a99d06ec.chunk.js","sourcesContent":["// TODO: Refactor with wasm\n\nconst deepCloneArray = (origin) => {\n    return JSON.parse(JSON.stringify(origin));\n}\n\nconst compareArray = (a, b) => {\n    if (a.length !== b.length) {\n        throw new Error('Compare error! Array length is not the same!');\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst hitStone = (no, st, effect, totalStateNum) => {\n    const s = deepCloneArray(st);\n    for (let i = 0; i < effect[no].length; i++) {\n        s[effect[no][i]] = (s[effect[no][i]] + 1) % totalStateNum;\n    }\n\n    return s;\n}\n\nlet paths = [];\n\nconst doSearch = (st, target, hitNo, path, maxHitTimes, effect, totalStateNum) => {\n    if (path.length > maxHitTimes) {\n        return;\n    }\n\n    let s\n    if (hitNo >= 0) {\n        s = hitStone(hitNo, st, effect, totalStateNum);\n        if (compareArray(s, target)) {\n            paths.push(path);\n            return;\n        }\n    }\n\n    for (let i = 0; i < st.length; i++) {\n        doSearch(\n            s ?? st,\n            target,\n            i,\n            path + i.toString(),\n            maxHitTimes,\n            effect,\n            totalStateNum\n        );\n    }\n}\n\nconst search = (initState, targetState, effects) => {\n    if (compareArray(initState, targetState)) {\n        return '';\n    }\n\n    let maxHitTimes = 5;\n    const totalStateNum = 4;\n    paths = [];\n    while (paths.length === 0) {\n        doSearch(\n            initState,\n            targetState,\n            -1,\n            '',\n            maxHitTimes,\n            effects,\n            totalStateNum\n        );\n        maxHitTimes += 5;\n    }\n\n    let shortest = '9'.repeat(256);\n    \n    for (const path of paths) {\n        if (path.length < shortest.length) {\n            shortest = path;\n        }\n    }\n\n    return shortest;\n}\n\nexport default search;\n","import './App.css';\nimport { useState } from 'react';\nimport search from './core/search';\nimport {\n  TextareaAutosize,\n  CardContent,\n  Button,\n  Box,\n  TextField,\n  Typography,\n  Card\n} from '@mui/material';\n\nfunction App() {\n  const [origin, setOrigin] = useState('2, 1, 1, 3');\n  const [target, setTarget] = useState('0, 0, 0, 0');\n  const [effect, setEffect] = useState(`\n    [0, 1],\n    [0, 1, 2],\n    [1, 2, 3],\n    [2, 3]\n  `);\n  const [result, setResult] = useState(null);\n  const handleOriginChange = (event) => {\n    setOrigin(event.target.value);\n  }\n  const handleTargetChange = (event) => {\n    setTarget(event.target.value);\n  }\n  const handleEffectChange = (event) => {\n    setEffect(event.target.value);\n  }\n  const onButtonClick = () => {\n    const o = JSON.parse(`[${origin}]`);\n    const t = JSON.parse(`[${target}]`);\n    const e = JSON.parse(`[${effect}]`);\n    setResult(search(o, t, e));\n  }\n  \n  return (\n    <Box sx={{\n      p: '1.5rem'\n    }}>\n      <Box sx={{\n        display: 'flex',\n        flexDirection: 'column'\n      }}>\n        <TextField\n          required\n          label=\"Original Value\"\n          value={origin}\n          onChange={handleOriginChange}\n          sx={{ m: 2 }}\n        />\n        <TextField\n          required\n          label=\"Target Value\"\n          value={target}\n          onChange={handleTargetChange}\n          sx={{ m: 2 }}\n        />\n        <Box \n          sx={{ m: 2 }}\n        >\n          <TextareaAutosize\n            minRows={5}\n            style={{ width: \"100%\" }}\n            value={effect}\n            onChange={handleEffectChange}\n          />\n        </Box>\n        <Button\n          sx={{ m: 2 }}\n          variant=\"contained\"\n          onClick={onButtonClick}\n        >\n          Calculate\n        </Button>\n        <Card variant=\"outlined\">\n          <CardContent>\n            <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n              Result (0 index): \n            </Typography>\n            <Typography variant=\"h5\" component=\"div\">\n              {result}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}